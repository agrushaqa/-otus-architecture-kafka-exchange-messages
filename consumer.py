import json

from kafka import KafkaConsumer

import register
from features.steps.src.commands.generated_adapters.autogen_adapter_movable \
    import AutoGeneratedMovableAdapter
from features.steps.src.commands.ubject2d import UObject2D
from features.steps.src.ioc.common import IoC
from features.steps.src.scope import Scopes
from game import Game

if __name__ == "__main__":
    consumer = KafkaConsumer(
        "operation_info",
        bootstrap_servers='127.0.0.1:9092',
        auto_offset_reset='earliest',
        group_id="consumer-group-a")
    print("starting the consumer")
    for msg in consumer:
        json_dict = json.loads(msg.value)
        mytask_args = [json_dict["args"]["x"], json_dict["args"]["y"]]
        ioc = IoC()
        scope = Scopes()
        obj = UObject2D()
        mygame = Game(obj)
        reg_op = register.RegisterOperations()
        reg_op.register(ioc, scope, obj)
        game_id = mygame.new_game("main")
        movable1 = AutoGeneratedMovableAdapter(obj, ioc)
        ball_object_id = reg_op.add_object(ioc, game_id, "ball", movable1)
        set_position_id = reg_op.add_operation(ioc,
                                               game_id,
                                               ball_object_id,
                                               movable1.set_position)
        get_position_id = reg_op.add_operation(ioc,
                                               game_id,
                                               ball_object_id,
                                               movable1.get_position)
        set_velocity_id = reg_op.add_operation(ioc,
                                               game_id,
                                               ball_object_id,
                                               movable1.set_velocity)
        get_velocity_id = reg_op.add_operation(ioc,
                                               game_id,
                                               ball_object_id,
                                               movable1.get_velocity)
        set_position_operation = ioc.resolve("Operation.get_entity",
                                   f'{json_dict["game_id"]}.'
                                   f'{json_dict["object_id"]}.'
                                   f'{json_dict["operation_id"]}'
                                   ".operation_id").execute()
        set_position_operation(mytask_args)
        get_position_operation = ioc.resolve("Operation.get_entity",
                                   f'{json_dict["game_id"]}.'
                                   f'{json_dict["object_id"]}.'
                                   f'{get_position_id}'
                                   ".operation_id").execute()
        get_position_operation()
        print(get_position_operation())
